{
	"info": {
		"_postman_id": "0c5a0aad-f8c1-4233-a5e5-012221072594",
		"name": "tic tac toe development",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32555479",
		"_collection_link": "https://planetary-equinox-750048.postman.co/workspace/Team-Workspace~c48cadeb-1074-403a-856c-bc162dfcb813/collection/32555479-0c5a0aad-f8c1-4233-a5e5-012221072594?action=share&source=collection_link&creator=32555479"
	},
	"item": [
		{
			"name": "0.health-care",
			"item": [
				{
					"name": "Health Care",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status health care\", function () {",
									"",
									"    const responseData =  pm.response.json()",
									"",
									"    // Check if the response status code is 200",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.expect(responseData.statusCode).to.eql(200);",
									"    });",
									"",
									"    // Check if the response contains the expected message",
									"    pm.test(\"Response message is correct\", function () {",
									"        pm.expect(responseData.message).to.eql(\"success connect to the server\");",
									"    });",
									"",
									"    // Check if the status field is true",
									"    pm.test(\"Status field is true\", function () {",
									"        pm.expect(responseData.status).to.eql(true);",
									"    });",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASEURL}}/health-care",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"health-care"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1.auth",
			"item": [
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Register Endpoint Test\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.test(\"Handle 200 OK Response\", function () {",
									"            pm.response.to.have.jsonBody({",
									"                message: \"User created with success\",",
									"                status: true,",
									"                statusCode: 200",
									"            });",
									"        });",
									"    } ",
									"    else if (pm.response.code === 400) {",
									"        pm.test(\"Handle 400 Bad Request Response\", function () {",
									"            pm.response.to.have.jsonBody({",
									"                message: \"User already exists\",",
									"                status: false,",
									"                statusCode: 400",
									"            });",
									"        });",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"first_name\": \"{{first_name}}\",\n    \"last_name\": \"{{last_name}}\",\n    \"age\": {{age}}\n}"
						},
						"url": {
							"raw": "{{BASEURL}}/register",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ai",
			"item": [
				{
					"name": "best move",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Best move test\", function () {",
									"",
									"    const responseBody = pm.response.json();",
									"",
									"    if (pm.response.code == 200) {",
									"        ",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Response body has expected structure\", function () {",
									"            pm.expect(responseBody).to.have.property(\"data\");",
									"            pm.expect(responseBody).to.have.property(\"message\", \"Computer best move\");",
									"            pm.expect(responseBody).to.have.property(\"status\", true);",
									"            pm.expect(responseBody).to.have.property(\"statusCode\", 200);",
									"            pm.expect(responseBody.data).to.have.property(\"best_move\");",
									"            pm.expect(responseBody.data).to.have.property(\"spend_time\");",
									"        });",
									"",
									"        pm.test(\"Response data is valid\", function () {",
									"            pm.expect(responseBody.data.best_move).to.be.a(\"number\");",
									"            pm.expect(responseBody.data.spend_time).to.be.a(\"number\");",
									"            pm.expect(responseBody.data.best_move).to.be.within(0, 8);",
									"            pm.expect(responseBody.data.spend_time).to.be.gt(0);",
									"        });",
									"",
									"    } else {",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        pm.test(\"Response body has expected structure\", function () {",
									"            pm.expect(responseBody).to.have.property(\"data\");",
									"            pm.expect(responseBody).to.have.property(\"message\", \"Board data length does not represent a square board.\");",
									"            pm.expect(responseBody).to.have.property(\"status\", false);",
									"            pm.expect(responseBody).to.have.property(\"statusCode\", 400);",
									"        });",
									"",
									"        pm.test(\"Response data is valid\", function () {",
									"            pm.expect(responseBody.data).to.be.eql([]);",
									"        });",
									"",
									"    }",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"board\": {{board}},\n    \"algorithm\": true,\n    \"time\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}ai/best_move",
							"host": [
								"{{BASEURL}}ai"
							],
							"path": [
								"best_move"
							]
						}
					},
					"response": [
						{
							"name": "min max",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"board\": {{board}},\n    \"time\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}ai/best_move",
									"host": [
										"{{BASEURL}}ai"
									],
									"path": [
										"best_move"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "alpha beta",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"board\": {{board}},\n    \"algorithm\": false,\n    \"time\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}ai/best_move",
									"host": [
										"{{BASEURL}}ai"
									],
									"path": [
										"best_move"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "4x4",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"board\": {{big_board}},\n    \"algorithm\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}ai/best_move",
									"host": [
										"{{BASEURL}}ai"
									],
									"path": [
										"best_move"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "wrong board",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"board\": {{wrong_board}},\n    \"algorithm\": true,\n    \"time\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}ai/best_move",
									"host": [
										"{{BASEURL}}ai"
									],
									"path": [
										"best_move"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASEURL",
			"value": "https://flask-app-h2bx.onrender.com",
			"type": "string"
		},
		{
			"key": "email",
			"value": "raedrdhaounia@gmail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "dadHH123!",
			"type": "string"
		},
		{
			"key": "first_name",
			"value": "raed",
			"type": "string"
		},
		{
			"key": "last_name",
			"value": " rdhaounia",
			"type": "string"
		},
		{
			"key": "age",
			"value": "29",
			"type": "string"
		}
	]
}